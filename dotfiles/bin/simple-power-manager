#!/bin/sh

# MIT License

# Copyright (c) 2018 Adam Schaefers sch@efers.org

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

about() {
    cat << EOF
Project Home:

    https://github.com/a-schaefers/simple-power-manager

About simple-power-manager:

    Simple Power Manager is a programmable shell script daemon that performs
    actions based on power thresholds. By default simple-power-manager is
    pre-configured to send desktop notifications using notify-send and adjust
    brightness levels using xbacklight. Being "programmable," edit
    ~/.config/simple-power-manager/config to make it do almost anything.
    Simple Power Manager can be thought of as a lightweight alternative to
    similar applications such as xfce-power-manager and mate-power-manager.
EOF
}

help() {
    cat << EOF
Usage: simple-power-manager [OPTION...]

  -d, --daemon               start the daemon and fork the process
  -D, --default-config       regenerate the default configuration file
  --restart                  restart the daemon
  --enable                   awake the daemon from a sleep loop
  --disable                  put the daemon in a sleep loop
  --status                   display whether the daemon is enabled or disabled
  --about                    display more information about this program
  -h, --help                 display this help menu
EOF
}

daemon_start() {
    [ "$(pidof -o %PPID -x "${0##*/}")" ] && die "Simple Power Manager is already running"

    # set thresholds "array"
    batt_thresholds="99 80 40 20 10 5"

    # one-time setup (verify acpi is available and create dir structure in $HOME/.config)
    command -v acpi > /dev/null || die "acpi not found"
    [ ! -d "$HOME/.config/simple-power-manager/state" ] && mkdir -p "$HOME/.config/simple-power-manager/state"
    [ ! -f "$HOME/.config/simple-power-manager/config" ] &&  make_defconfig

    # clean potential left-over state
    rm -f "$HOME/.config/simple-power-manager/state"/* > /dev/null 2>&1

    # start the "daemon" loop
    while true; do
        # if daemon is disabled, enter a sleep loop
        until [ ! -f "$HOME/.config/simple-power-manager/state/sleep" ]; do sleep 1; done

        # sourcing of the user config file happens now
        if [ -f "$HOME/.config/simple-power-manager/config" ];then
            . "$HOME/.config/simple-power-manager/config"
        else
            make_defconfig
            . "$HOME/.config/simple-power-manager/config"
        fi

        # get battery % and status
        acpi_info

        # if trigger has not already been fired, and if battery % is less than or equal
        # to a threshold and if battery state is Discharging, then run user_custom_low_battery_hook
        if [ "$acpi_status" = "Discharging" ];then
            echo "$batt_thresholds" | tr ' ' '\n' | while read -r state; do
                if [ "$batt" -eq "$state" ] || [ "$batt" -lt "$state" ]; then
                    if [ ! -f "$HOME/.config/simple-power-manager/state/$state" ]; then
                        rm -f "$HOME/.config/simple-power-manager/state/100"
                        touch "$HOME/.config/simple-power-manager/state/$state"
                        user_custom_low_battery_hook
                    fi
                fi
            done
        fi

        # if trigger has not already been fired, and if battery state is Charging or
        # Full, then run user_custom_battery_normal_hook
        if [ "$acpi_status" = "Charging" ] || [ "$acpi_status" = "Full" ]
        then
            if [ ! -f "$HOME/.config/simple-power-manager/state/100" ];then
                rm -f "$HOME/.config/simple-power-manager/state"/* > /dev/null 2>&1
                touch "$HOME/.config/simple-power-manager/state/100"
                user_custom_battery_normal_hook
            fi
        fi
    done & # fork the process
}

# ~/.config/simple-power-manager/config section
make_defconfig() {
    if [ ! -f "$HOME/.config/simple-power-manager/config" ];then
        cat <<EOF > "$HOME/.config/simple-power-manager/config"
############################################################################
# DEFAULT CONFIG - CUSTOMIZE ME - /bin/sh - it's shell script, be careful! #
############################################################################

# example desktop notification command
notifycmd() { notify-send "Battery: \$acpi_status \${batt}%"; }

# example backlight commands
backlightcmd="xbacklight -set"
backlight_high() { \$backlightcmd 100; }
backlight_medium() { \$backlightcmd 80; }
backlight_low() { \$backlightcmd 20; }
backlight_crit() { \$backlightcmd 10; }

# battery polling frequency
sleep 5

user_custom_low_battery_hook() {
    if [ "\$batt" -lt 100 ] && [ "\$batt" -gt 80 ]; then
        # 80-99% battery
        backlight_high

     elif [ "\$batt" -lt 81 ] && [ "\$batt" -gt 40 ]; then
        # 40-80% battery
        backlight_medium

     elif [ "\$batt" -lt 41 ] && [ "\$batt" -gt 20 ]; then
        # 20-40% battery
        backlight_medium

     elif [ "\$batt" -lt 21 ] && [ "\$batt" -gt 10 ]; then
        # 10-20% battery
        notifycmd
        backlight_medium

     elif [ "\$batt" -lt 11 ] && [ "\$batt" -gt 5 ]; then
        # 5-10% battery
        notifycmd
        backlight_low

     elif [ "\$batt" -lt 6 ]; then
        # 5% battery or less
        notifycmd
        backlight_crit
    fi
}

user_custom_battery_normal_hook() {
    # battery Charging / Full
    notifycmd
    backlight_high
}
EOF
        echo "(SPM) Configuration script written to $HOME/.config/simple-power-manager/config"
        echo "(SPM) Please modify it accordingly before running simple-power-manager again."
        exit 0
    else
        die "Configuration script already exists in $HOME/.config/simple-power-manager/config"
    fi
}

daemon_restart() {
    restart() {
        FORCE=1 simple-power-manager -d && \
            echo "(SPM) Restarting Daemon"
    }
    trap restart TERM
    kill "$(pidof -o %PPID -x "simple-power-manager")"
}

daemon_disable() {
    touch "$HOME/.config/simple-power-manager/state/sleep" && \
        echo "(SPM) Simple Power Manager daemon is disabled."
}

daemon_enable() {
    rm -f "$HOME/.config/simple-power-manager/state/sleep" && \
        echo "(SPM) Simple Power Manager daemon is enabled."
}

daemon_status() {
    acpi_info ; echo "(SPM) Battery: $acpi_status ${batt}%"
    if [ ! "$(pidof -o %PPID -x "${0##*/}")" ];
    then
        die "Simple Power Manager daemon is not running. Try \"simple-power-manager --daemon\""
    elif [ "$(pidof -o %PPID -x "${0##*/}")" ] && \
             [ -f "$HOME/.config/simple-power-manager/state/sleep" ]; then
        echo "(SPM) Simple Power Manager daemon is running and disabled."
    else
        echo "(SPM) Simple Power Manager daemon is running and enabled."
    fi
}

acpi_info() {
    # get the wanted acpi columns + strip whitespace using awk
    # TODO: awk could do a lot more work instead of using so much case and parameter substitution...
    acpi="$(acpi | awk '{print $3 $4}')"

    # ensure batt is a valid input
    batt="${acpi#*,}" ; batt="${batt%\%*}"
    batt_check () {
        case ${1#[-+]} in
            *[!0-9]* | '') return 1 ;;
            * ) return 0 ;;
        esac
    }
    batt_check "$batt" || die "\$batt is not an integer"

    # ensure acpi_status is a valid input
    acpi_status="${acpi%%,*}"
    acpi_status_check() {
        case $acpi_status in
            Charging    ) return 0 ;;
            Discharging ) return 0 ;;
            Full        ) return 0 ;;
            *           ) return 1 ;;
        esac
    }
    acpi_status_check "$batt" || die "\$acpi_status is not one of: Charging,Discharging,Full"
}

die() {
    [ $# -gt 0 ] && printf -- "%s\n" "(SPM) $*"
    exit 1
}

[ ! $# -eq 1 ] && help && exit 1
case $1 in
    -d               ) daemon_start ;;
    --daemon         ) daemon_start ;;
    -D               ) make_defconfig ;;
    --default-config ) make_defconfig ;;
    --disable        ) daemon_disable ;;
    --enable         ) daemon_enable ;;
    --status         ) daemon_status ;;
    --restart        ) daemon_restart ;;
    --about          ) about ;;
    -h               ) help ;;
    --help           ) help ;;
    *                ) help; exit 1 ;;
esac
